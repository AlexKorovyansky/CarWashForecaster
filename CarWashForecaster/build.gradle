buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.5.+'
    }
}
apply plugin: 'android'

repositories {
    mavenCentral()
}

sourceSets {
    testLocal {
        java.srcDir file('src/test/java')
        resources.srcDir file('src/test/res')
    }
}

dependencies {
    compile 'com.android.support:support-v4:13.0.+'
    compile 'com.squareup.retrofit:retrofit:1.1.1'
    compile 'com.google.android.gms:play-services:3.1.36'
    compile 'com.jakewharton.timber:timber:1.1.+'

    testLocalCompile 'junit:junit:4.8.2'
}

android {
    compileSdkVersion 17
    buildToolsVersion "17.0.0"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 17
    }

    signingConfigs {
        release {
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }
}

// If you want to make signed release build, you can run in terminal

// $ ./gradlew -PkeystoreFile=/path/to/key/store
//            -PkeystorePassword=keystore_password
//            -PkeyAlias=key_alias
//            -PkeyPassword=key_password
//      assembleRelease

if (project.hasProperty('keystoreFile')
        && project.hasProperty('keystorePassword')
        && project.hasProperty('keyAlias')
        && project.hasProperty('keyPassword')) {
    android.signingConfigs.release.storeFile = file(keystoreFile)
    android.signingConfigs.release.storePassword = keystorePassword
    android.signingConfigs.release.keyAlias = keyAlias
    android.signingConfigs.release.keyPassword = keyPassword
}


task localTest(type: Test, dependsOn: assemble) {
    testClassesDir = sourceSets.testLocal.output.classesDir

    android.sourceSets.main.java.srcDirs.each { dir ->
        def buildDir = dir.getAbsolutePath().split('/')
        buildDir =  (buildDir[0..(buildDir.length - 4)] + ['build', 'classes', 'debug']).join('/')

        sourceSets.testLocal.compileClasspath += files(buildDir)
        sourceSets.testLocal.runtimeClasspath += files(buildDir)
    }

    classpath = sourceSets.testLocal.runtimeClasspath
}

check.dependsOn localTest